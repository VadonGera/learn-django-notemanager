# Задаём имя проекта
name: user-notes
# Указывает версию формата файла (вроде как устарело уже)
# version: '3.9'

# Определяет службы, которые будут запущены в контейнерах
services:
  api:
    build:
      context: ./src  # путь к директории с Dockerfile для сборки образа
      dockerfile: Dockerfile  # имя Dockerfile (по умолчанию, но можно указать явно)
    # Автоматически перезапускает контейнер, если он выходит из строя
    restart: always
    # command: убрали в entrypoint.sh, там:
    # Миграции, создаем Superuser и запускаем встроенный сервер Django

    # Пробрасываем 8000 порт контейнера на 8000 порт (127.0.0.1:8000)
    ports:
      - "8000:8000"
    # Файл содержащий переменные окружения для контейнера
    env_file:
      - .env
    environment:
      RUNNING_IN_DOCKER: "1"  # Устанавливаем флаг, что это окружение Docker
    volumes:
      - static_volume:/my_application/staticfiles  # Добавляем volume для общей статики
    # Дожидаемся запуска контейнера db
    depends_on:
      db:
        # и проверки его состояния
        condition: service_healthy
    # Подключаем к сети my_backend
    networks:
      - horse

  nginx:
    build:
      context: src/nginx  # путь к директории с Dockerfile
      dockerfile: Dockerfile  # имя Dockerfile (по умолчанию, но можно указать явно)
    restart: always
    volumes:
      - static_volume:/my_application/staticfiles  # Подключаем volume со статикой
      - /path/to/certs:/etc/nginx/certs  # Прокиньте сертификаты внутрь контейнера
    ports:
#      - "8088:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - horse

  db:
    image: postgres:latest
    # Автоматически перезапускает контейнер, если он выходит из строя
    restart: always
    # Файл содержащий переменные окружения для контейнера
    env_file:
      - .env
    # Используем значения переменных окружения из .env файла
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    # Примонтируем том my_data к директории /var/lib/postgresql/data контейнера db
    volumes:
      - my_data:/var/lib/postgresql/data
    # Проверка состояния контейнера
    healthcheck:
      # Запускаем внутри контейнера проверку его состояния
      test: pg_isready -h db -U ${SQL_USER} -d ${SQL_DATABASE}
#      test: ["CMD-SHELL", "pg_isready -h db -U $POSTGRES_USER -d $POSTGRES_DB"]
      # Интервал между проверками
      interval: 3s
      # Время на завершение проверки
      timeout: 3s
      # Количество неуспешных попыток проверки для "отказа"
      retries: 3
      # Ожидание перед началом проверок
      start_period: 3s
    # Порт, если нужно подключаться к базе данных с хоста (опционально)
    #  ports:
    #  - "5432:5432"
    # Подключаем к сети horse
    networks:
      - horse

volumes:
  my_data:  # Объявляем том my_data для хранения данных PostgreSQL
  static_volume:  # Определяем общий volume статики

networks:
  horse:
    driver: bridge